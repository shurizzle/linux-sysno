use std::{
    collections::{HashMap, HashSet},
    fmt,
};

use color_eyre::{
    eyre::{bail, Context},
    Result,
};

pub struct SysnoEnum(Vec<(Box<str>, usize)>);

pub fn build_enum<I>(iter: I) -> Result<SysnoEnum>
where
    I: Iterator<Item = std::io::Result<(Box<str>, usize)>>,
{
    let mut values = HashMap::new();
    let mut nos = HashSet::new();
    for l in iter {
        let (name, no) = l.wrap_err("Failed to parse header file")?;
        if !nos.insert(no) {
            bail!("");
        }
        if values.insert(name, no).is_some() {
            bail!("");
        }
    }

    let mut values = values.into_iter().collect::<Vec<_>>();
    values.sort_by_key(|x| x.1);

    Ok(SysnoEnum(values))
}

impl fmt::Display for SysnoEnum {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        writeln!(f, "#![allow(non_camel_case_types)]\n")?;
        writeln!(f, "// This file is automatically generated. Do not edit.\n")?;
        writeln!(f, "/// List of system call numbers.")?;
        writeln!(f, "#[repr(usize)]")?;
        writeln!(f, "#[non_exhaustive]")?;
        writeln!(
            f,
            "#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]"
        )?;
        writeln!(f, "pub enum Sysno {{")?;
        for (name, no) in &self.0 {
            writeln!(
                f,
                "    /// See doc at [{}(2)](https://man7.org/linux/man-pages/man2/{}.2.html).",
                name.as_ref(),
                name.as_ref()
            )?;
            writeln!(f, "    {} = {},", Id(name.as_ref()), no)?;
        }
        writeln!(f, "}}")
    }
}

struct Id<'a>(pub &'a str);

impl<'a> Id<'a> {
    const KEYWORDS: &'static [&'static str] = [
        "as",
        "break",
        "const",
        "continue",
        "crate",
        "else",
        "enum",
        "extern",
        "false",
        "fn",
        "for",
        "if",
        "impl",
        "in",
        "let",
        "loop",
        "match",
        "mod",
        "move",
        "mut",
        "pub",
        "ref",
        "return",
        "self",
        "Self",
        "static",
        "struct",
        "super",
        "trait",
        "true",
        "type",
        "unsafe",
        "use",
        "where",
        "while",
        "async",
        "await",
        "dyn",
        "abstract",
        "become",
        "box",
        "do",
        "final",
        "macro",
        "override",
        "priv",
        "typeof",
        "unsized",
        "virtual",
        "yield",
        "try",
        "macro_rules",
        "union",
    ]
    .as_slice();
}

impl<'a> fmt::Display for Id<'a> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        if Self::KEYWORDS.contains(&self.0) {
            write!(f, "r#{}", self.0)
        } else {
            fmt::Display::fmt(self.0, f)
        }
    }
}
